@charset "utf-8";

@use 'sass:map';

/* ---------- Palette (hex values) ---------- */
$palette: (
  'white': #ffffff,

  gray-50: #f9fafb,
  gray-100: #f3f4f6,
  gray-200: #e5e7eb,
  gray-300: #d1d5db,
  gray-400: #9ca3af,
  gray-500: #6b7280,
  gray-600: #4b5563,
  gray-700: #374151,
  gray-800: #1f2937,
  gray-900: #111827,

  green-50: #ecfdf5,
  green-100: #d1fae5,
  green-500: #22c55e,
  green-600: #16a34a,
  green-700: #15803d,

  indigo-50: #eef2ff,
  indigo-500: #6366f1,
  indigo-600: #4f46e5,

  red-500: #ef4444,
  blue-500: #3b82f6,
);

/* ---------- Semantic tokens referencing palette ---------- */
$semantic: (
  color-bg: map.get($palette, gray-50),
  color-surface: map.get($palette, gray-100),
  color-border: map.get($palette, gray-200),
  color-text: map.get($palette, gray-900),
  color-muted: map.get($palette, gray-600),
  color-primary: map.get($palette, green-600),
  color-accent: map.get($palette, indigo-600),
  color-danger: map.get($palette, red-500),
);

/* ---------- Spacing scale ---------- */
$space: (
  0: 0,
  1: 0.25rem,
  // 4px
  2: 0.5rem,
  // 8px
  3: 0.75rem,
  // 12px
  4: 1rem,
  // 16px
  6: 1.5rem,
  // 24px
  8: 2rem,
  // 32px
  12: 3rem,
  // 48px
  16: 4rem,
  // 64px
  32: 8rem,
  // 128px
  64: 16rem,
  // 256px
  128: 32rem,
);

/* ---------- Radii & sizes ---------- */
$radii: (
  radius-sm: 0.125rem,
  radius-md: 0.375rem,
  radius-lg: 0.75rem,
);

$sizes: (
  size-diagram-width: 650px,
  size-diagram-height: 300px,
);

/* ---------- Motion ---------- */
$motion: (
  duration-fast: 120ms,
  duration-base: 200ms,
  timing-default: cubic-bezier(0.22, 0.9, 0.35, 1),
);

/* ---------- Breakpoints ---------- */
$breakpoints: (
  sm: 640px,
  md: 768px,
  lg: 1024px,
  xl: 1280px,
);

/* Emit root CSS custom properties so components can use var(--token-name) */
:root {
  /* semantic tokens */
  @each $name, $val in $semantic {
    --#{$name}: #{$val};
  }

  /* raw palette (optional) */
  @each $name, $val in $palette {
    --palette-#{$name}: #{$val};
  }

  /* spacing */
  @each $k, $v in $space {
    --space-#{$k}: #{$v};
  }

  /* radii */
  @each $k, $v in $radii {
    --#{$k}: #{$v};
  }

  /* sizes */
  @each $k, $v in $sizes {
    --#{$k}: #{$v};
  }

  /* motion */
  @each $k, $v in $motion {
    --#{$k}: #{$v};
  }

  /* breakpoints */
  @each $k, $v in $breakpoints {
    --bp-#{$k}: #{$v};
  }
}

/* ---------- SCSS helpers ---------- */
@function token($name) {
  @return unquote('var(--#{$name})');
}

@function space($key) {
  @if map-has-key($space, $key) {
    @return map.get($space, $key);
  }
  @return null;
}

@mixin elevation($level: 1) {
  $key: if(
    $level == 0,
    elevation-0,
    if($level == 2, elevation-2, if($level >= 3, elevation-3, elevation-1))
  );
  box-shadow: token($key);
}

@mixin responsive-font($min, $max, $min-vw: 320px, $max-vw: 1200px) {
  font-size: $min;
  @media (min-width: $min-vw) {
    font-size: calc(
      #{$min} + (#{$max} - #{$min}) * ((100vw - #{$min-vw}) / (#{$max-vw} - #{$min-vw}))
    );
  }
  @media (min-width: $max-vw) {
    font-size: $max;
  }
}
